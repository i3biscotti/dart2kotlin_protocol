syntax = "proto3";

package protocol;

import "position.proto";

message Expression {
  oneof expr {
    IntLit intLit = 2;
    DecLit decLit = 3;
    StringLit stringLit = 4;
    BoolLit boolLit = 5;
    ListLiteralExpression listLiteralExpression = 6;
    BinaryMathExpression binaryMathExpression = 7;
    BinaryLogicExpression binaryLogicExpression = 8;
    UnaryMathExpression unaryMathExpression = 9;
    UnaryLogicExpression unaryLogicExpression = 10;
    PreIncrementExpression preIncrementExpression = 11;
    PostIncrementExpression postIncrementExpression = 12;
    PreDecrementExpression preDecrementExpression = 13;
    PostDecrementExpression postDecrementExpression = 14;
    InputExpression inputExpression = 15;
    OutputExpression outputExpression = 16;
    VarReferenceExpression varReferenceExpression = 17;
    ParenthesisExpression parenthesisExpression = 18;
    FunctionCallExpression functionCallExpression = 19;
    ObjectPropertyReferenceExpression objectPropertyReferenceExpression = 20;
    ObjectMethodCallExpression objectMethodCallExpression = 21;
    BinaryComparisonExpression binaryComparisonExpression = 22;
  }
}

message IntLit {
  string value = 1;
  Position position = 2;
}

message DecLit {
  string value = 1;
  Position position = 2;
}

message StringLit {
  string value = 1;
  Position position = 2;
}

message BoolLit {
  string value = 1;
  Position position = 2;
}

message ListLiteralExpression {
  repeated Expression value = 1;
  Position position = 2;
}

message BinaryExpression {
  Expression left = 1;
  Expression right = 2;
}

message BinaryMathExpression {
  Expression left = 1;
  Expression right = 2;
  MathOperand operand = 3;
  Position position = 4;
}

message BinaryLogicExpression {
  Expression left = 1;
  Expression right = 2;
  LogicOperand operand = 3;
  Position position = 4;
}

message BinaryComparisonExpression {
  Expression left = 1;
  Expression right = 2;
  ComparisonOperand operand = 3;
  Position position = 4;
}

message UnaryMathExpression {
  Expression value = 1;
  MathOperand operand = 2;
  Position position = 3;
}

message UnaryLogicExpression {
  Expression value = 1;
  LogicOperand operand = 2;
  Position position = 4;
}

message PreIncrementExpression {
  string name = 1;
  Position position = 2;
}

message PostIncrementExpression {
  string name = 1;
  Position position = 2;
}

message PreDecrementExpression {
  string name = 1;
  Position position = 2;
}

message PostDecrementExpression {
  string name = 1;
  Position position = 2;
}

message InputExpression {
  Position position = 2;
}

message OutputExpression {
  Expression value = 1;
  Position position = 2;
}

message VarReferenceExpression {
  string name = 1;
  Position position = 2;
}

message ParenthesisExpression {
  Expression value = 1;
  Position position = 2;
}

message FunctionCallExpression {
  string name = 1;
  repeated Expression parameters = 2;
  Position position = 3;
}

message ObjectPropertyReferenceExpression {
  string objectName = 1;
  string propertyName = 2;
  Position position = 3;
}

message ObjectMethodCallExpression {
  string objectName = 1;
  string methodName = 2;
  repeated Expression parameters = 3;
  Position position = 4;
}


enum MathOperand {
  PLUS = 0;
  MINUS = 1;
  TIMES = 2;
  DIVISION = 3;
}

enum LogicOperand {
  AND = 0;
  OR = 1;
  NOT = 2;
}

enum ComparisonOperand {
  EQUAL = 0;
  LESS_THAN = 1;
  LESS_THAN_OR_EQUAL = 2;
  GREATER_THAN = 3;
  GREATER_THAN_OR_EQUAL = 4;
  NOT_EQUAL = 5;
}