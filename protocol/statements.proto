syntax = "proto3";

package protocol;

import "expressions.proto";
import "position.proto";

enum VariableType {
  TYPE = 0;
  VARIABLE = 1;
  IMMUTABLE = 2;
  CONSTANT = 3;
}

message VariableValueType {
  string name = 1;
}


message Statement {
  oneof stmt {
    AssignmentStatement assignmentStatement = 1;
    ClassDefinitionStatement classDefinitionStatement = 2;
    ExpressionDefinitionStatement expressionDefinitionStatement = 3;
    IfDefinitionStatement ifDefinitionStatement = 4;
    ObjectPropertyAssignmentStatement objectPropertyAssignmentStatement = 5;
    ReturnStatement returnStatement = 6;
    VariableDeclarationStatement varDeclarationStatement = 7;
    WhileDefinitionStatement whileDefinitionStatement = 8;
    ForDefinitionStatement forDefinitionStatement = 9;
  }

}

message AssignmentStatement {
  string name = 1;
  Expression value = 2;
  Position position = 3;
}

enum  EncapsulationType {
  PUBLIC = 0;
  PRIVATE = 1;
};

message ClassDefinitionStatement {
  EncapsulationType encapsulation = 1;
  string name = 2;
  string parentName = 3;
  repeated VariableDeclarationStatement properties = 4;
  repeated ConstructorDefinitionStatement constructors = 5;
  repeated FunctionDefinitionStatement methods = 6;
  VariableValueType parentClassType = 7;
  Position position = 8;
}

message FunctionDefinitionStatement {
  string name = 1;
  repeated Parameter parameters = 2;
  VariableValueType returnType = 3;
  repeated Statement statements = 4;
  Position position = 5;
}

message ConstructorDefinitionStatement {
  string className = 1;
  string constructorName = 2;
  repeated Parameter parameters = 3;
  repeated Statement body = 4;
  ThisConstructorDefinition thisConstructor = 5;
  Position position = 6;
}

message ThisConstructorDefinition {
  repeated Expression parameters = 1;
}

message Parameter {
  string name = 1;
  ParameterType type = 2;
  VariableValueType valueType = 3;
  Position position = 4;
}

enum ParameterType {
  TYPE = 0;
  THIS = 1;
  SUPER = 2;
}

message ExpressionDefinitionStatement {
  Expression value = 1;
  Position position = 2;
}

message IfDefinitionStatement {
  IfBlock ifBlock = 1;
  repeated IfBlock elseIfBlocks = 2;
  IfBlock elseBlock = 3;
  Position position = 4;
}

enum BlockType {
  IF_BLOCK = 0;
  ELSE_IF_BLOCK = 1;
  ELSE_BLOCK = 2;
}

message IfBlock {
  Expression condition = 1;
  repeated Statement statements = 2;
  BlockType blockType = 3;
  Position position = 4;
}

message WhileDefinitionStatement {
  Expression condition = 1;
  repeated Statement statements = 2;
  Position position = 3;
}

message ForInitOrIncrementStatement {
  oneof init_or_increment {
    VarDeclarationForStatement varDeclarationForStatement = 1;
    AssignmentForStatement assignmentForStatement = 2;
    ExpressionForStatement expressionForStatement = 3;
  }
}

message VarDeclarationForStatement {
  VariableType varType = 1;
  string name = 2;
  VariableValueType valueType = 3;
  Expression value = 4;
  Position position = 5;
}

message AssignmentForStatement {
  string name = 1;
  Expression value = 2;
  Position position = 3;
}

message ExpressionForStatement {
  Expression value = 1;
  Position position = 2;
}

message ForDefinitionStatement {
  ForCondition forCondition = 1;
  repeated Statement statements = 2;
  Position position = 3;
}

message ForCondition {
  oneof condition {
    StandardForCondition standardForCondition = 1;
    ForEachCondition forEachCondition = 2;
  }
}

message StandardForCondition {
  ForInitOrIncrementStatement initStatement = 1;
  Expression controlExpression = 2;
  ForInitOrIncrementStatement incrementStatement = 3;
  Position position = 4;
}

message ForEachCondition {
  ItemDefinition itemDefinition = 1;
  Expression expression = 2;
  Position position = 3;
}

message ItemDefinition {
  VariableType varType = 1;
  string name = 2;
  VariableValueType valueType = 3;
  Position position = 4;
}

message ObjectPropertyAssignmentStatement {
  string objectName = 1;
  string propertyName = 2;
  Expression value = 3;
  Position position = 4;
}

message ReturnStatement {
  Expression value = 1;
  Position position = 2;
}

message VariableDeclarationStatement {
  VariableType varType = 1;
  string name = 2;
  VariableValueType valueType = 3;
  Expression value = 4;
  Position position = 5;
}